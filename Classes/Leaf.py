"""
Leaf.py
This file contains the class Leaf
Leaf is used to define the leaf attacks generated by Twisted Lumber
"""

import pygame
from pygame.sprite import Sprite
from Classes.Delay import Delay

class Leaf(Sprite):
    def __init__(self, w_settings, x, y, facing_left, darting, cur_time):
        super(Leaf, self).__init__()
        self.w_settings = w_settings
        self.x = x
        self.y = y
        self.facing_left = facing_left
        self.darting = darting  # True or False depending on if it is a leaf dart attack

        self.rect = pygame.Rect(self.x, self.y, self.w_settings.TL_leaf_width, self.w_settings.TL_leaf_height)
        if facing_left:
            self.image = self.w_settings.TL_leaf_left_image
        else:
            self.image = self.w_settings.TL_leaf_right_image

        if self.darting:
            self.dart_delay = Delay(self.w_settings.TL_leaf_dart_wait_period)
            self.dart_delay.begin(cur_time)

    def update_pos(self, cur_time):
        if self.darting:
            self.update_pos_dart(cur_time)
        self.rect.x = int(self.x)
        self.rect.y = int(self.y)

    def update_pos_dart(self,cur_time):
        if not self.dart_delay.is_active(cur_time):
            if self.facing_left:
                self.x += self.w_settings.TL_leaf_dart_speed * -1
            else:
                self.x += self.w_settings.TL_leaf_dart_speed
